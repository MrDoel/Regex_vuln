1. SQL Injection
Pattern: ".*\\s*('[^']*'|\"[^\"]*\")\\s*.*"
Description: This regex attempts to find instances where user input (usually denoted by single or double quotes) is directly concatenated with SQL queries. This pattern might detect potential SQL injection vulnerabilities.

2. Cross-Site Scripting (XSS)
Pattern: "<\\s*script[^>]*>.*<\\s*/\\s*script\\s*>"
Description: This regex looks for <script> tags in output HTML, which might indicate a Cross-Site Scripting vulnerability if user input is not properly sanitized.

3. Path Traversal
Pattern: ".*\\.{2}/.*"
Description: This regex finds instances of ../ in paths, which could be used in a path traversal attack.

4. Command Injection
Pattern: Runtime\\.getRuntime\\(\\)\\.exec\\(.*"
Description: Looks for uses of Runtime.getRuntime().exec(), which can be vulnerable to command injection if user input is part of the command.

5. Insecure Cryptography
Pattern: Cipher\\.getInstance\\("DES"\\)
Description: This regex finds instances of the DES encryption algorithm, which is considered insecure.

6. Hardcoded Sensitive Information
Pattern: private\\s+static\\s+final\\s+String\\s+.*\\s*=\\s*\".*\";
Description: Detects hardcoded strings, which might include sensitive information like passwords or API keys.

7. Insecure Random Number Generation
Pattern: new\\s+Random\\(\\)
Description: Detects instances of the Random class, which is not secure for cryptographic operations.

8. Insecure File Upload
Pattern: file\\.getOriginalFilename\\(\\)
Description: Finds instances of getting the original file name from an upload, which can be a vector for attacks if not properly validated.

9. Unvalidated Redirects and Forwards
Pattern: response\\.sendRedirect\\(.*
Description: Looks for redirections in server responses, which can be a vulnerability if the URL is not validated.

10. Weak Hashing Functions
Pattern: MessageDigest\\.getInstance\\("MD5"\\)|MessageDigest\\.getInstance\\("SHA1"\\)
Description: Detects the use of weak hashing algorithms like MD5 or SHA1.

11. Hardcoded IP Addresses
Pattern: \\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b
Description: Identifies hardcoded IP addresses, which can be a sign of insecure configuration.

12. Using Default Security Provider
Pattern: Security\\.getProvider\\("SunJSSE"\\)
Description: Finds usage of a default security provider, which might not meet security requirements.

13. Insecure Logging of Sensitive Data
Pattern: logger\\.info\\(.*password.*\\)|logger\\.debug\\(.*password.*\\)
Description: Searches for logging statements that might include sensitive information like passwords.

14. Use of Deprecated Java Security Classes
Pattern: javax\\.security\\.cert\\.X509Certificate
Description: Identifies use of deprecated security classes that might have vulnerabilities.

15. Missing SSL Certificate Validation
Pattern: HttpsURLConnection\\.setDefaultHostnameVerifier\\(.*
Description: Looks for potential misconfigurations where SSL certificate validation is disabled or bypassed.

16. Insecure LDAP Queries
Pattern: DirContext\\.search\\(.*
Description: Detects LDAP search queries, which can be susceptible to injection if not properly sanitized.


17. Improper Error Handling
Pattern: catch\\s*\\(Exception e\\)\\s*\\{\\s*\\}
Description: This pattern detects empty catch blocks which can potentially hide underlying issues and make debugging more difficult.

18. Exposure of Sensitive System Information
Pattern: System\\.out\\.println\\(.*password.*\\)|System\\.err\\.println\\(.*password.*\\)
Description: Identifies print statements that could inadvertently expose sensitive information like passwords.

19. Use of Insecure or Outdated Libraries
Pattern: import\\s+javax\\.xml\\.bind\\.JAXBContext;
Description: Searches for imports of potentially outdated or insecure libraries, in this case, JAXBContext from the Java XML Binding (JAXB) API.

20. Insecure Data Serialization
Pattern: new\\s+ObjectInputStream\\(.*\\)
Description: Detects instances of object deserialization, which can be vulnerable to attacks if the data is not properly validated or if untrusted data sources are used.

21. Insecure Use of Reflection
Pattern: Class\\.forName\\(.*\\)|Method\\.invoke\\(.*\\)
Description: Finds usage of reflection methods, which can be misused to bypass access controls or execute arbitrary code.

22. Hardcoded Cryptographic Keys
Pattern: Key\\s*=\\s*\"[0-9a-zA-Z+/=]{16,}\"
Description: Searches for hardcoded cryptographic keys, which is a common security anti-pattern.

23. Missing X-Frame-Options Header
Pattern: response\\.setHeader\\("X-Frame-Options",\\s*""\\)
Description: Looks for missing or empty X-Frame-Options response header, which helps mitigate clickjacking attacks.

24. Unrestricted Upload of File with Dangerous Type
Pattern: getContentType\\(\\)\\.equals\\(".*"\\)
Description: Identifies checks for file types in upload handling, which can be a risk if not properly validated.

25. Use of TrustManager that Accepts Any Certificates
Pattern: new\\s+X509TrustManager\\(\\)\\s*\\{.*accepts\\s+any\\s+certificates.*\\}
Description: Finds custom implementations of X509TrustManager that might accept any SSL certificate, which is a common security vulnerability.

26. Excessive User Privileges
Pattern: setPermissions\\(.*"admin".*\\)
Description: Detects potential code snippets where excessive privileges like 'admin' are set or modified.

27. Insecure Use of getParameter
Pattern: request\\.getParameter\\(.*
Description: Detects direct uses of getParameter which might not consider proper input validation, leading to vulnerabilities like SQL injection or XSS.

28. Weak SSL/TLS Protocol Versions
Pattern: SSLContext\\.getInstance\\("SSLv3"\\)
Description: Identifies the use of older and less secure SSL/TLS protocol versions like SSLv3.

29. Excessive Logging of Sensitive Information
Pattern: logger\\.log\\(.*credentials.*\\)|logger\\.log\\(.*credit.*\\)
Description: Searches for logs that might include sensitive information like credentials or credit card numbers.

30. Unvalidated Forward or Redirect
Pattern: forward\\(.*\\)|redirect\\(.*\\)
Description: Looks for forwarding or redirecting requests that may not properly validate the destination, leading to potential security risks.

31. Use of System Properties
Pattern: System\\.getProperty\\(.*
Description: Detects access to system properties, which could reveal sensitive information if not handled securely.

32. Unsecured Cookie Attributes
Pattern: new\\s+Cookie\\(.*\\).setSecure\\(false\\)
Description: Finds instances where cookies are set without the Secure attribute, which can be a security risk, especially for cookies containing sensitive data.

33. Unchecked File Deletion
Pattern: File\\.delete\\(\\)
Description: Identifies file deletion operations that may not check for the success of the deletion, potentially leading to security issues.

34. Use of exec() with Variable Command
Pattern: Runtime\\.getRuntime\\(\\)\\.exec\\(.*\\+.*\\)
Description: Detects uses of exec() with variable command inputs, which can be a vector for command injection attacks.

35. Lack of Timeout Setting in Network Connections
Pattern: new\\s+Socket\\(.*\\)
Description: Searches for socket connections without explicit timeout settings, which could lead to denial-of-service vulnerabilities.

36. Insecure File Permissions
Pattern: setReadable\\(true\\,\\s*false\\)|setWritable\\(true\\,\\s*false\\)
Description: Identifies file permission changes that make files globally readable or writable, which can be a security risk.


37. Direct Use of Sockets
Pattern: new\\s+Socket\\(.*\\)
Description: Detects direct socket creation, which can lead to security risks if not properly managed or secured.

38. Unrestricted Access to System Properties
Pattern: System\\.getenv\\(.*
Description: Searches for accesses to system environment variables, which could lead to exposure of sensitive information.

39. Insecure Cookie Creation
Pattern: new\\s+Cookie\\(.*\\)
Description: Identifies cookie creation without security considerations like HttpOnly or Secure flags.

40. Weak Encryption Algorithms
Pattern: Cipher\\.getInstance\\("DES"\\)|Cipher\\.getInstance\\("RC4"\\)
Description: Flags use of weak or outdated encryption algorithms like DES or RC4.

41. Insecure Temporary File Creation
Pattern: File\\.createTempFile\\(.*\\)
Description: Detects creation of temporary files, which could be insecure if not handled properly.

42. Use of External Storage
Pattern: Environment\\.getExternalStorageDirectory\\(\\)
Description: Finds usage of external storage, which can be less secure and expose data to unauthorized access.

43. Hardcoded Database Credentials
Pattern: \"jdbc:\\w+://.*\",\\s*\".+\",\\s*\".+\"
Description: Looks for hardcoded database connection strings, including usernames and passwords.

44. Lack of Content Security Policy
Pattern: setHeader\\("Content-Security-Policy",\\s*""\\)
Description: Identifies missing or empty Content Security Policy (CSP) headers in HTTP responses.

45. Use of Insecure PrintStream Methods
Pattern: PrintStream\\.print\\(.*\\)|PrintStream\\.println\\(.*\\)
Description: Detects use of PrintStream methods, which can inadvertently lead to exposure of sensitive data.

46. Insecure Data Storage
Pattern: SharedPreferences\\.edit\\(\\).*\\.commit\\(\\)
Description: Searches for uses of SharedPreferences in Android, which might not be secure for storing sensitive data.

47. Unverified Hostname in SSL/TLS
Pattern: setDefaultHostnameVerifier\\(.*
Description: Looks for SSL/TLS hostname verifiers that accept any hostname, which can undermine SSL/TLS security.

48. Unchecked Return Value
Pattern: File\\.mkdirs\\(\\);
Description: Finds file/directory creation commands without checking the return value, which can lead to security risks if the creation fails silently.

49. Insecure Broadcast Receivers in Android
Pattern: registerReceiver\\(.*null,.*\\)
Description: Detects registrations of broadcast receivers in Android applications without specifying a security permission, potentially leading to information leakage.

50. Using Hardcoded Seed for Random Number Generation
Pattern: new\\s+Random\\(\\d+\\)
Description: Identifies instances where a hardcoded seed is used for random number generation, leading to predictable outcomes.

51. Improper Certificate Validation
Pattern: TrustManagerFactory\\.getInstance\\("PKIX"\\)
Description: Searches for potential improper use of certificate validation in SSL/TLS connections.

52. Unchecked URL Redirection
Pattern: response\\.sendRedirect\\(request\\.getParameter\\(.*\\)\\)
Description: Detects redirection based on user input without validation, which can lead to open redirect vulnerabilities.

53. Insecure HTTP Methods
Pattern: setAllowedHttpMethods\\(.*\\)
Description: Looks for configurations that enable insecure HTTP methods, potentially opening up security vulnerabilities.

54. Use of Weak Password Hashing Functions
Pattern: MessageDigest\\.getInstance\\("SHA1"\\)|MessageDigest\\.getInstance\\("MD5"\\)
Description: Flags use of weak password hashing functions like SHA1 or MD5.

55. Insecure use of WebView
Pattern: new\\s+WebView\\(.*\\);
Description: Detects creation of WebView instances, which can be a security concern if not properly configured in Android applications.

56. Unchecked Change of File Permissions
Pattern: setExecutable\\(.*\\)|setReadable\\(.*\\)|setWritable\\(.*\\)
Description: Identifies changes to file permissions, which can be risky if not properly managed.

57. Inadequate Logging of Security-related Events
Pattern: logger\\.debug\\("User login failed".*\\)|logger\\.info\\("User authenticated".*\\)
Description: Searches for inadequate logging of critical security-related events, which is important for monitoring and forensic analysis.

58. Hardcoded Security Questions/Answers
Pattern: String\\s+securityQuestion\\s*=\\s*".*";\\s*String\\s+securityAnswer\\s*=\\s*".*";
Description: Looks for hardcoded security questions or answers, which can compromise account recovery mechanisms.

59. Insecure Content Provider Access in Android
Pattern: getContentResolver\\(\\)\\.query\\(.*\\)
Description: Detects potentially insecure access to content providers in Android, which can lead to data leakage.

60. Use of Vulnerable Java Classes or Methods
Pattern: java\\.security\\.acl\\.Group
Description: Searches for references to vulnerable or deprecated Java classes or methods.

61. Insecure Property Binding
Pattern: @Value\\(.*\\)
Description: Detects the use of @Value annotations, which can inadvertently bind externalized values like system properties or environment variables, potentially leading to security issues if not properly validated.

62. Exposing Sensitive Beans via JMX
Pattern: @ManagedResource
Description: Identifies beans annotated with @ManagedResource, which might expose sensitive operations or data via JMX.

63. Insecure Data Binding in Controllers
Pattern: @ModelAttribute\\(.*\\)
Description: Searches for usage of @ModelAttribute in Spring MVC controllers, which could lead to automatic binding of request parameters to model attributes, potentially causing security issues if not handled cautiously.

64. Unvalidated Request Mapping
Pattern: @RequestMapping\\(.*\\)
Description: Detects @RequestMapping annotations, which might be handling requests without proper validation or security checks.

65. Autowiring Sensitive Beans
Pattern: @Autowired\\s+private\\s+.*
Description: Looks for private fields in Spring beans annotated with @Autowired, which can be a sign of poor encapsulation and potential security risks, especially for sensitive beans.

66. Using Deprecated Spring Security Classes
Pattern: org\\.springframework\\.security\\.core\\.GrantedAuthority
Description: Flags usage of deprecated classes in Spring Security, indicating potentially outdated security practices.

67. Insecure Exposure of Actuator Endpoints
Pattern: management\\.endpoint\\..*\\.enabled=true
Description: Identifies enabling of Spring Boot Actuator endpoints in properties files, which can expose sensitive application and system information if not secured.

68. Hardcoded Credentials in Spring Configuration
Pattern: spring\\.datasource\\.username=.*|spring\\.datasource\\.password=.*
Description: Searches for hardcoded database credentials in Spring configuration files.

69. Lack of CSRF Protection in Spring Security
Pattern: http\\.csrf\\(\\)\\.disable\\(\\)
Description: Looks for explicit disabling of CSRF protection in Spring Security configurations, which is a critical vulnerability in web applications.

70. Insecure Session Management
Pattern: sessionManagement\\(\\)\\.sessionCreationPolicy\\(SessionCreationPolicy\\.ALWAYS\\)
Description: Detects insecure session management configurations in Spring Security, particularly the policy to always create a session.

71. Exposing Internal Information through Spring MVC
Pattern: @ResponseBody\\s+.*
Description: Identifies methods in Spring MVC controllers annotated with @ResponseBody, which could unintentionally expose internal information if the response is not properly controlled.

72. Unsafe Deserialization of Client-Supplied Data
Pattern: @RequestBody\\s+.*
Description: Searches for usage of @RequestBody in controllers, which can be risky if the deserialization of client-supplied data is not securely handled.

73. Insecure Configuration of Spring Profiles
Pattern: @Profile\\("dev"\\)|@Profile\\("test"\\)
Description: Detects the use of development or test profiles in Spring, which might include insecure settings or expose sensitive information.

74. Exposing Endpoints without Security Constraints
Pattern: @RequestMapping\\(.*public.*\\)
Description: Searches for @RequestMapping annotations that could be exposing endpoints without proper security constraints.

75. Misuse of Spring's Environment Interface
Pattern: environment\\.getProperty\\(.*\\)
Description: Looks for direct calls to the Spring Environment interface to retrieve properties, which can lead to security issues if sensitive information is not handled securely.

76. Insecure Bean Factory Usage
Pattern: getBean\\(.*\\)
Description: Detects usage of the getBean method, which can potentially lead to security risks if misused in the context of Spring’s ApplicationContext.

77. Unsafe Handling of User Input in Spring Data
Pattern: @Query\\(.*\\+.*\\)
Description: Searches for potential unsafe concatenation of user input in custom Spring Data @Query annotations, which can lead to injection vulnerabilities.

78. Lack of Method Security in Spring Services
Pattern: @Service\\s+public class.*
Description: Identifies Spring Services that might lack method-level security annotations, potentially exposing sensitive business logic.

79. Insecure CORS Configuration
Pattern: @CrossOrigin\\(.*\\)
Description: Looks for the @CrossOrigin annotation, which can indicate potentially insecure CORS (Cross-Origin Resource Sharing) configurations.

80. Using JdbcTemplate with Dynamic Queries
Pattern: jdbcTemplate\\.query\\(.*\\+.*\\)|jdbcTemplate\\.update\\(.*\\+.*\\)
Description: Flags usage of JdbcTemplate with string concatenation, which can be a risk for SQL injection.

81. Exposing Sensitive Error Information
Pattern: @ExceptionHandler.*return new ResponseEntity\\<.*\\>\\(.*\\)
Description: Detects custom exception handlers that might expose sensitive error information in the response.

82. Insecure Thymeleaf Template Processing
Pattern: @RequestMapping\\(.*\\)\\s+.*ModelAndView.*
Description: Searches for methods returning ModelAndView objects, which can be a risk if Thymeleaf templates are processed without proper validation or escaping.

83. Unsafe Spring Batch Job Configurations
Pattern: @EnableBatchProcessing\\s+public class.*
Description: Identifies Spring Batch configurations, which can be risky if job parameters are not properly validated or secured.

84. Improper Handling of Static Resources
Pattern: addResourceHandlers\\(.*\\)
Description: Looks for configurations related to static resource handlers in Spring MVC, which can lead to security risks if misconfigured.

85. Insecure JPA Repository Queries
Pattern: @Query\\(".*\\$\\{.*\\}.*"\\)
Description: Looks for potential injection vulnerabilities in JPA repository queries, where external input might be concatenated or included unsafely.

86. Spring Security Misconfigurations
Pattern: http\\.authorizeRequests\\(\\)\\.antMatchers\\(".*"\\)\\.permitAll\\(\\)
Description: Detects Spring Security configurations that permit unrestricted access to certain endpoints, which can be a security risk.

87. Unsecured Spring Boot Actuator Endpoints
Pattern: management\\.endpoints\\.web\\.exposure\\.include=.*
Description: Searches for properties files exposing potentially sensitive actuator endpoints in Spring Boot applications.

88. Use of Eager Initialization in Spring Beans
Pattern: @Lazy\\(false\\)|@Bean\\(initMethod = ".*"\\)
Description: Identifies eager initialization of Spring beans, which can be a concern if sensitive startup processes are involved.

89. Exposing Sensitive Information via Spring Boot Info Endpoint
Pattern: info\\.app\\.name=.*|info\\.app\\.description=.*
Description: Looks for properties in Spring Boot's info endpoint that might expose sensitive application details.

90. Spring MVC Controllers without Security Annotations
Pattern: @RestController\\s+public class.*
Description: Detects Spring MVC controllers that might lack proper security annotations, potentially leading to unauthorized access.

91. Insecure Usage of @Async in Spring
Pattern: @Async\\s+public.*
Description: Searches for the @Async annotation, which can be risky if the asynchronous method handling is not secured.

92. Unvalidated Spring MVC Form Bindings
Pattern: @ModelAttribute\\(".*"\\)\\s+.*
Description: Identifies potential risks in Spring MVC where form data is bound to models without adequate validation.

93. Excessive Permissions in Spring Security Expressions
Pattern: @PreAuthorize\\("hasAuthority\\('ROLE_ADMIN'\\)"\\)|@Secured\\("ROLE_ADMIN"\\)
Description: Flags usage of high-level permissions like 'ROLE_ADMIN' in security expressions, which might be excessive for certain operations.

94. Spring Data REST Repositories without Security
Pattern: @RepositoryRestResource\\(.*\\)
Description: Detects Spring Data REST repositories that might not have adequate security controls in place.

95. Insecure Spring Boot Configuration Properties
Pattern: @ConfigurationProperties\\(".*"\\)
Description: Searches for Spring Boot configuration properties classes, which can be a source of security vulnerabilities if not handled properly.

96. Misconfigured Spring Security OAuth2
Pattern: @EnableOAuth2Sso|@EnableAuthorizationServer
Description: Identifies OAuth2 configurations in Spring Security, which can be risky if not set up correctly.

97. Excessive Data Exposure in Spring Data REST
Pattern: @RepositoryRestResource\\(exported = true\\)
Description: Flags Spring Data REST repositories that are explicitly exported, which could lead to unintentional data exposure if not properly secured.

98. Insecure Configuration of Spring Cloud
Pattern: @EnableDiscoveryClient\\s+public class.*
Description: Detects the enabling of Spring Cloud's Discovery Client, which can be a risk if the cloud infrastructure is not securely configured.

99. Use of Prototype Scope in Security-related Beans
Pattern: @Scope\\("prototype"\\)\\s+@Bean
Description: Looks for prototype-scoped beans in Spring, which can be a concern for security-related beans due to the potential for multiple instances.

100. Hardcoded Secret Keys in Spring Security
Pattern: secretKey\\s*=\\s*['\"].*['\"]
Description: Searches for hardcoded secret keys in Spring Security configurations, which is a common security anti-pattern.

101. Unsecured WebSocket Endpoints in Spring
Pattern: @ServerEndpoint\\(".*"\\)
Description: Identifies WebSocket endpoints that might be unsecured, potentially leading to vulnerabilities in real-time communication features.

102. Insecure Entity Relationships in Spring Data JPA
Pattern: @OneToMany\\(.*\\)|@ManyToOne\\(.*\\)
Description: Detects potentially insecure configurations of entity relationships in Spring Data JPA, which could lead to data integrity issues.

103. Use of Spring's Environment for Sensitive Data
Pattern: environment\\.getRequiredProperty\\(".*"\\)
Description: Searches for direct calls to fetch properties from the Spring Environment, which can be risky if sensitive data is involved and not properly handled.

104. Spring Batch Jobs with Insecure Parameters
Pattern: @Bean\\s+public Job.*
Description: Flags Spring Batch job definitions, which might include insecure job parameters or execution contexts.

105. Misconfigured Hystrix Command in Spring Cloud
Pattern: @HystrixCommand\\(.*\\)
Description: Looks for Hystrix command annotations in Spring Cloud, which can be a risk if fallback methods or configurations are not securely implemented.

106. Insecure Redirects in Spring MVC
Pattern: return\\s+"redirect:.*"
Description: Identifies redirections in Spring MVC controllers, which can be a vector for open redirect attacks if not properly validated.

107. Overly Permissive Cross-Origin Resource Sharing (CORS)
Pattern: @CrossOrigin\\(origins = "\\*"\\)
Description: Searches for CORS configurations with overly permissive settings, specifically allowing all origins, which can expose resources to cross-origin attacks.

108. Unvalidated Path Variables in Spring MVC
Pattern: @PathVariable\\(".*"\\)\\s+.*
Description: Detects the use of path variables in Spring MVC without proper validation, potentially leading to security risks like path traversal.

109. Unsecured Spring MVC File Uploads
Pattern: @RequestMapping\\(.*\\)\\s+.*MultipartFile.*
Description: Identifies Spring MVC controller methods that handle file uploads, which can be a risk if the uploaded files are not properly validated or handled securely.

110. Insecure Configuration of Spring Session
Pattern: @EnableSpringHttpSession
Description: Detects the enabling of Spring HTTP Session management, which can be a concern if session data is not secured or if session management is misconfigured.

111. Spring Security with Basic Authentication
Pattern: http\\.httpBasic\\(\\)
Description: Looks for configurations in Spring Security that enable basic authentication, which can be insecure if not used over HTTPS.

112. Inadequate Role Checks in Spring Security
Pattern: @PreAuthorize\\("hasRole\\('USER'\\)"\\)
Description: Searches for Spring Security annotations with potentially inadequate role checks, which might not provide sufficient access control.

113. Spring AOP Misconfigurations
Pattern: @Aspect\\s+public class.*
Description: Identifies Aspect-oriented Programming (AOP) configurations in Spring, which can be a risk if aspects are applied incorrectly, especially in security contexts.

114. Spring Security Misconfigurations in WebSecurityConfigurerAdapter
Pattern: extends WebSecurityConfigurerAdapter
Description: Flags potential misconfigurations in classes extending WebSecurityConfigurerAdapter, a central class in Spring Security for custom configurations.

115. Exposing Sensitive Endpoints through Spring Boot Admin
Pattern: @EnableAdminServer
Description: Looks for the enabling of Spring Boot Admin Server, which can expose sensitive actuator endpoints if not properly secured.

116. Insecure Spring Cloud Config Server
Pattern: @EnableConfigServer
Description: Identifies enabling of the Spring Cloud Config Server, which can be a vulnerability if sensitive configuration data is not properly protected.

117. Unsafe Property Loading in Spring
Pattern: @PropertySource\\(".*"\\)
Description: Searches for direct loading of properties files in Spring, which can lead to security issues if sensitive information is not properly managed.

118. Spring Security OAuth2 Misconfigurations
Pattern: @EnableResourceServer|@EnableOAuth2Client
Description: Detects configurations related to OAuth2 resource servers and clients in Spring Security, which can be risky if not set up correctly.

119. Insecure Method Level Security in Spring
Pattern: @Secured\\("ROLE_USER"\\)
Description: Looks for method-level security annotations in Spring that might not provide adequate protection or are misconfigured.

120. Spring MVC Controllers without Proper Exception Handling
Pattern: @ControllerAdvice\\s+public class.*
Description: Identifies Spring MVC controller advice classes, which can be a concern if global exception handling is not properly implemented

121. Insecure JMX Bean Exposure
Pattern: @ManagedResource\\(.*\\)
Description: Identifies beans that are exposed via JMX (Java Management Extensions), which can be risky if sensitive operations or data are not properly secured.

122. Spring MVC Handler Methods without Validation
Pattern: @RequestMapping\\(.*\\)\\s+public.*
Description: Detects Spring MVC handler methods, looking for potential missing validation checks which can lead to security vulnerabilities.

123. Insecure LDAP Queries in Spring Data LDAP
Pattern: LdapTemplate\\.search\\(.*\\)
Description: Searches for LDAP query operations in Spring Data LDAP, which can be vulnerable to injection if not properly sanitized.

124. Exposing Sensitive Beans in Spring Remote Services
Pattern: @Service\\(.*\\)\\s+@Remote\\(.*\\)
Description: Flags Spring beans that are exposed as remote services, which can be a security concern if sensitive functionality is involved.

125. Unvalidated Redirects in Spring Security OAuth2
Pattern: @RequestMapping\\(value = ".*redirect.*"\\)
Description: Looks for potential unvalidated redirects in Spring Security OAuth2 controllers, which can lead to open redirect vulnerabilities.

126. Spring Data REST Exposing IDs
Pattern: @RepositoryRestResource\\(.*exposeIdsFor.*\\)
Description: Identifies configurations in Spring Data REST where entity IDs are explicitly exposed, which might lead to security issues.

127. Insecure Spring Cache Configurations
Pattern: @EnableCaching\\s+public class.*
Description: Detects the enabling of caching in Spring, which can be a risk if sensitive data is cached without proper security considerations.

128. Unsafe Use of Spring's RestTemplate
Pattern: new RestTemplate\\(.*\\)
Description: Searches for instances of RestTemplate creation, which can be risky if not properly configured, especially for SSL/TLS settings.

129. Insecurely Configured Spring Cloud Gateway Routes
Pattern: @Bean\\s+public RouteLocator.*
Description: Looks for custom route configurations in Spring Cloud Gateway, which can be a vulnerability if routes are not properly secured.

130. Unsecure Handling of Active Profiles in Spring
Pattern: @ActiveProfiles\\(.*\\)
Description: Identifies the use of active profiles in Spring tests, which might include insecure settings or expose sensitive information.

131. Spring Security Misuse of UserDetailsService
Pattern: @Service\\s+public class.*UserDetailsService.*
Description: Flags custom implementations of UserDetailsService in Spring Security, which can be a risk if user details are not properly managed or secured.

132. Insecure Entity Serialization in Spring MVC
Pattern: @ResponseBody\\s+@RequestMapping.*
Description: Detects Spring MVC methods that automatically serialize entities to JSON/XML, which can be insecure if the entities contain sensitive data.

133. Misuse of Spring Profiles for Security Configurations
Pattern: @Profile\\("prod"\\)
Description: Looks for the use of specific profiles (like 'prod' for production) in security configurations, which can lead to environment-specific security weaknesses.

134. Spring Security AntMatcher Misconfiguration
Pattern: http\\.antMatcher\\(".*"\\)\\.authorizeRequests\\(.*\\)
Description: Looks for potentially misconfigured antMatcher patterns in Spring Security, which might inadvertently expose secure endpoints.

135. Improper Scope Declarations in Spring Beans
Pattern: @Scope\\("prototype"\\|\\s*"request"\\)
Description: Identifies potentially improper scope declarations in Spring bean configurations, which can lead to security concerns, especially in stateful beans.

136. Insecure Configuration of Spring Cloud Stream
Pattern: @EnableBinding\\(.*\\)
Description: Detects the enabling of Spring Cloud Stream bindings, which can be risky if message channels are not properly secured.

137. Using Spring's @Scheduled Without Security Context
Pattern: @Scheduled\\(.*\\)
Description: Searches for use of the @Scheduled annotation, which might execute scheduled tasks outside of the proper security context.

138. Spring MVC Controllers Returning Sensitive Information
Pattern: @RequestMapping\\(.*\\)\\s+public.*@ResponseBody.*
Description: Identifies Spring MVC controller methods returning sensitive information directly in the response body, which can be a data leakage concern.

139. Insecure Binder Configuration in Spring Cloud
Pattern: @EnableBinding\\(Sink\\.class\\)
Description: Flags the use of default binder configurations in Spring Cloud Stream, which can be insecure if not properly customized and secured.

140. Exposing Internal Beans via Spring MVC
Pattern: @RestController\\s+public class.*
Description: Detects Rest Controllers in Spring, which might inadvertently expose internal beans or services if not properly managed.

141. Insecure Property Management in Spring
Pattern: @PropertySource\\(.*\\)
Description: Searches for direct inclusion of property files in Spring, which can lead to insecure management of application properties.

142. Unsecured Methods in Spring Security Configurations
Pattern: @Override\\s+protected void configure\\(HttpSecurity http\\)
Description: Looks for overridden configure methods in Spring Security configuration, which can be a risk if security constraints are not properly applied.

143. Insecure Use of Spring Profiles
Pattern: @Profile\\("dev"\\|\\s*"test"\\)
Description: Identifies use of specific profiles like 'dev' or 'test', which might have less secure configurations.

144. Misuse of Spring's JmsTemplate
Pattern: new JmsTemplate\\(.*\\)
Description: Flags the creation of JmsTemplate instances in Spring, which can be a concern for message security if not properly configured.

145. Insecure Exposure of Actuator Health Endpoints
Pattern: management\\.endpoint\\.health\\.show-details=always
Description: Searches for configurations that expose detailed health information via Spring Boot Actuator, which might reveal sensitive system information.

146. Spring Data REST Exposure of Internal Repositories
Pattern: @RepositoryRestResource\\(.*\\)
Description: Looks for annotations that expose data repositories through Spring Data REST, which can lead to unintended data exposure if not secured properly.